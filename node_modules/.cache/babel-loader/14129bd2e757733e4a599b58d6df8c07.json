{"ast":null,"code":"var _jsxFileName = \"/home/dev/myreads/starter/myReads/src/features/bookList/bookList.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport * as BooksAPI from \"../../BooksAPI\";\nimport Book from \"../book/book\";\nimport \"./bookList.css\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { getBooks } from \"./bookListSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookList = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const bookList = useSelector(state => state.bookSlice.book);\n  useEffect(() => {\n    dispatch(getBooks());\n  }, [dispatch]); // const getAllBooks = () => {\n  //   BooksAPI.getAll()\n  //     .then((res) => {\n  //       updateBooks({ books: res });\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // };\n\n  const updateStatus = (status, book) => {\n    BooksAPI.update(book, status).then(res => {\n      console.log(res); // getAllBooks();\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const bookShelfs = bookList.books.filter(book => book.shelf === props.shelf.value);\n  const bookListView = bookShelfs.map((book, index) => {\n    return /*#__PURE__*/_jsxDEV(Book, {\n      title: book.title,\n      imageUrl: book.imageLinks.thumbnail,\n      author: book.authors[0],\n      shelf: props.shelf,\n      book: book,\n      updateBookStauts: updateStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-books\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-books-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookshelf\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"bookshelf-title\",\n            children: props.shelf.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bookshelf-books\",\n            children: /*#__PURE__*/_jsxDEV(\"ol\", {\n              className: \"books-grid\",\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\" \", bookListView, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookList, \"JHlDt/JKpwiv4rFBd96/tcb0abk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = BookList;\nexport default BookList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookList\");","map":{"version":3,"sources":["/home/dev/myreads/starter/myReads/src/features/bookList/bookList.js"],"names":["useState","useEffect","BooksAPI","Book","useSelector","useDispatch","getBooks","BookList","props","dispatch","bookList","state","bookSlice","book","updateStatus","status","update","then","res","console","log","catch","err","bookShelfs","books","filter","shelf","value","bookListView","map","index","title","imageLinks","thumbnail","authors","name"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,KAAKC,QAAZ,MAA0B,gBAA1B;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAO,gBAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,iBAAzB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAMK,QAAQ,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBC,IAA5B,CAA5B;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACH,QAAQ,EAAT,CAAR;AACD,GAFQ,EAEN,CAACG,QAAD,CAFM,CAAT,CAJ0B,CAQ1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMK,YAAY,GAAG,CAACC,MAAD,EAASF,IAAT,KAAkB;AACrCX,IAAAA,QAAQ,CAACc,MAAT,CAAgBH,IAAhB,EAAsBE,MAAtB,EACGE,IADH,CACSC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EADa,CAEb;AACD,KAJH,EAKGG,KALH,CAKUC,GAAD,IAAS;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,KAPH;AAQD,GATD;;AAUA,QAAMC,UAAU,GAAGb,QAAQ,CAACc,KAAT,CAAeC,MAAf,CAChBZ,IAAD,IAAUA,IAAI,CAACa,KAAL,KAAelB,KAAK,CAACkB,KAAN,CAAYC,KADpB,CAAnB;AAGA,QAAMC,YAAY,GAAGL,UAAU,CAACM,GAAX,CAAe,CAAChB,IAAD,EAAOiB,KAAP,KAAiB;AACnD,wBACE,QAAC,IAAD;AACE,MAAA,KAAK,EAAEjB,IAAI,CAACkB,KADd;AAEE,MAAA,QAAQ,EAAElB,IAAI,CAACmB,UAAL,CAAgBC,SAF5B;AAGE,MAAA,MAAM,EAAEpB,IAAI,CAACqB,OAAL,CAAa,CAAb,CAHV;AAIE,MAAA,KAAK,EAAE1B,KAAK,CAACkB,KAJf;AAKE,MAAA,IAAI,EAAEb,IALR;AAME,MAAA,gBAAgB,EAAEC;AANpB;AAAA;AAAA;AAAA;AAAA,YADF;AAUD,GAXoB,CAArB;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,6BACE;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACE;AAAI,YAAA,SAAS,EAAC,iBAAd;AAAA,sBAAiCN,KAAK,CAACkB,KAAN,CAAYS;AAA7C;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAC,iBAAf;AAAA,mCACE;AAAI,cAAA,SAAS,EAAC,YAAd;AAAA,qCACE;AAAA,gCAAMP,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA3DD;;GAAMrB,Q;UACaF,W,EACAD,W;;;KAFbG,Q;AA6DN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport * as BooksAPI from \"../../BooksAPI\";\nimport Book from \"../book/book\";\nimport \"./bookList.css\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { getBooks } from \"./bookListSlice\";\n\nconst BookList = (props) => {\n  const dispatch = useDispatch();\n  const bookList = useSelector((state) => state.bookSlice.book);\n\n  useEffect(() => {\n    dispatch(getBooks())\n  }, [dispatch]);\n\n  // const getAllBooks = () => {\n  //   BooksAPI.getAll()\n  //     .then((res) => {\n  //       updateBooks({ books: res });\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // };\n\n  const updateStatus = (status, book) => {\n    BooksAPI.update(book, status)\n      .then((res) => {\n        console.log(res);\n        // getAllBooks();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  const bookShelfs = bookList.books.filter(\n    (book) => book.shelf === props.shelf.value\n  );\n  const bookListView = bookShelfs.map((book, index) => {\n    return (\n      <Book\n        title={book.title}\n        imageUrl={book.imageLinks.thumbnail}\n        author={book.authors[0]}\n        shelf={props.shelf}\n        book={book}\n        updateBookStauts={updateStatus}\n      ></Book>\n    );\n  });\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-content\">\n        <div>\n          <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{props.shelf.name}</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n                <li> {bookListView} </li>\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BookList;\n"]},"metadata":{},"sourceType":"module"}