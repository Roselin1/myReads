{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport * as BooksAPI from \"../../BooksAPI\";\nexport const getBooks = createAsyncThunk(\"fetchBooks\", async () => {\n  return BooksAPI.getAll().then(books => {\n    console.log(books);\n    return books;\n  });\n});\nexport const updateBooks = createAsyncThunk(\"updateBooks\", async payload => {\n  return BooksAPI.update(payload.book, payload.status).then(books => {});\n});\nexport const searchBooks = createAsyncThunk(\"searchBooks\", async inputValue => {\n  return BooksAPI.search(inputValue, 100).then(books => {\n    return books;\n  });\n});\nconst bookListSlice = createSlice({\n  name: \"bookListSlice\",\n  initialState: {\n    books: [],\n    error: null,\n    searchResultBooks: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getBooks.fulfilled, (state, action) => {\n      state.books = action.payload;\n    });\n    builder.addCase(getBooks.rejected, (state, action) => {\n      state.error = \"error\";\n    });\n    builder.addCase(searchBooks.fulfilled, (state, action) => {\n      state.searchResultBooks = action.payload;\n    });\n  }\n});\nexport const {} = bookListSlice.actions;\nexport default bookListSlice.reducer;","map":{"version":3,"sources":["/home/dev/myreads/starter/myReads/src/features/bookList/bookListSlice.js"],"names":["createSlice","createAsyncThunk","BooksAPI","getBooks","getAll","then","books","console","log","updateBooks","payload","update","book","status","searchBooks","inputValue","search","bookListSlice","name","initialState","error","searchResultBooks","reducers","extraReducers","builder","addCase","fulfilled","state","action","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAO,KAAKC,QAAZ,MAA0B,gBAA1B;AAEA,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CAAC,YAAD,EAAe,YAAY;AACjE,SAAOC,QAAQ,CAACE,MAAT,GAAkBC,IAAlB,CAAwBC,KAAD,IAAW;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAOA,KAAP;AACD,GAHM,CAAP;AAID,CALuC,CAAjC;AAMP,OAAO,MAAMG,WAAW,GAAGR,gBAAgB,CAAC,aAAD,EAAgB,MAAOS,OAAP,IAAmB;AAC5E,SAAOR,QAAQ,CAACS,MAAT,CAAgBD,OAAO,CAACE,IAAxB,EAA8BF,OAAO,CAACG,MAAtC,EAA8CR,IAA9C,CAAoDC,KAAD,IAAW,CAAE,CAAhE,CAAP;AACD,CAF0C,CAApC;AAGP,OAAO,MAAMQ,WAAW,GAAGb,gBAAgB,CACzC,aADyC,EAEzC,MAAOc,UAAP,IAAsB;AACpB,SAAOb,QAAQ,CAACc,MAAT,CAAgBD,UAAhB,EAA4B,GAA5B,EAAiCV,IAAjC,CAAuCC,KAAD,IAAW;AACtD,WAAOA,KAAP;AACD,GAFM,CAAP;AAGD,CANwC,CAApC;AAQP,MAAMW,aAAa,GAAGjB,WAAW,CAAC;AAChCkB,EAAAA,IAAI,EAAE,eAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACZb,IAAAA,KAAK,EAAE,EADK;AAEZc,IAAAA,KAAK,EAAE,IAFK;AAGZC,IAAAA,iBAAiB,EAAE;AAHP,GAFkB;AAOhCC,EAAAA,QAAQ,EAAE,EAPsB;AAQhCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,QAAQ,CAACuB,SAAzB,EAAoC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACrB,KAAN,GAAcsB,MAAM,CAAClB,OAArB;AACF,KAFD;AAGAc,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,QAAQ,CAAC0B,QAAzB,EAAmC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACP,KAAN,GAAc,OAAd;AACD,KAFH;AAGEI,IAAAA,OAAO,CAACC,OAAR,CAAgBX,WAAW,CAACY,SAA5B,EAAuC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxDD,MAAAA,KAAK,CAACN,iBAAN,GAA0BO,MAAM,CAAClB,OAAjC;AACD,KAFD;AAGH;AAlB+B,CAAD,CAAjC;AAoBA,OAAO,MAAM,KAAKO,aAAa,CAACa,OAAzB;AACP,eAAeb,aAAa,CAACc,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport * as BooksAPI from \"../../BooksAPI\";\n\nexport const getBooks = createAsyncThunk(\"fetchBooks\", async () => {\n  return BooksAPI.getAll().then((books) => {\n    console.log(books);\n    return books;\n  });\n});\nexport const updateBooks = createAsyncThunk(\"updateBooks\", async (payload) => {\n  return BooksAPI.update(payload.book, payload.status).then((books) => {});\n});\nexport const searchBooks = createAsyncThunk(\n  \"searchBooks\",\n  async (inputValue) => {\n    return BooksAPI.search(inputValue, 100).then((books) => {\n      return books;\n    });\n  }\n);\nconst bookListSlice = createSlice({\n  name: \"bookListSlice\",\n  initialState: {\n    books: [],\n    error: null,\n    searchResultBooks: [],\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getBooks.fulfilled, (state, action) => {\n       state.books = action.payload;\n    })\n    builder.addCase(getBooks.rejected, (state, action) => {\n        state.error = \"error\";\n      })\n      builder.addCase(searchBooks.fulfilled, (state, action) => {\n        state.searchResultBooks = action.payload;\n      })\n  }\n});\nexport const {} = bookListSlice.actions;\nexport default bookListSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}